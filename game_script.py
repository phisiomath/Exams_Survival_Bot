import numpy as np
import random


def get_policy(level):
    if level == 'top':
        policy_top = [[
            [[0.4, 0.4, 0.2], [[-20, 0, 0, 0], [20, 0, 0, 0], [-101, -101, -101, -101]]],
            [[0.4, 0.4, 0.2], [[-20, 0, 0, 0], [20, 0, 0, 0], [-101, -101, -101, -101]]],
            [[0.8, 0.2], [[10, 0, random.randint(-60, -20), random.randint(-60, 10)], [-101, -101, -101, -101]]],
            [[0.8, 0.2], [[random.randint(-60, -40), 0, 0, 0], [-101, -101, -101, -101]]],
            [[1], [[-20, 0, 0, random.randint(-10, 20)]]]
        ],
            [
                [[0.8, 0.2], [[10, 0, random.randint(-50, -30), 0], [-101, -101, -101, -101]]],
                [[0.8, 0.2], [[10, 0, random.randint(-30, -10), random.randint(-30, 10)], [-101, -101, -101, -101]]],
                [[0.8, 0.2], [[-10, 0, random.randint(-5, 20), random.randint(-30, -10)], [-101, -101, -101, -101]]],
                [[1], [[0, 0, random.randint(-5, 5), random.randint(-30, -20)]]]
            ],
            [
                [[0.8, 0.2], [[random.randint(-70, -30), 0, 5, -20], [-101, -101, -101, -101]]],
                [[0.4, 0.4, 0.2], [[random.randint(0, 30), 0, -5, 10], [-30, 0, 0, 10], [-101, -101, -101, -101]]],
                [[1], [[50, 0, -30, 30]]]
            ],
            [
                [[1], [[-30, 0, -10, 20]]],
                [[1], [[-50, 0, -5, 30]]],
                [[1], [[0, 0, 5, -15]]]
            ],
            [
                [[0.8, 0.2], [[-20, 0, -30, 30], [-101, -101, -101, -101]]],
                [[1], [[50, random.randint(0, 1), -20, -10]]]
            ],
            [
                [[1], [[-101, -101, -101, -101]]],
                [[1], [[-101, -101, -101, -101]]],
                [[1], [[-101, -101, -101, -101]]],
                [[1], [[-101, -101, -101, -101]]],
                [[1], [[-101, -101, -101, -101]]],
                [[1], [[random.randint(-10, 10), 0, 20, 20]]],
            ],
            [
                [[0.5, 0.5], [[50, -10, 0, random.randint(-10, 10)], [50, 0, 0, random.randint(-10, 10)]]],
                [[0.8, 0.2], [[-20, 0, 0, random.randint(-10, 10)], [-101, -101, -101, -101]]]
            ],
            [
                [[0.6, 0.2, 0.2], [[0, random.randint(0, 1), 25, 25], [0, 0, 25, -25], [-101, -101, -101, -101]]],
                [[0.9, 0.1], [[10, 0, -10, 0], [0, 2, -10, 20]]]
            ],
            [
                [[1], [[random.randint(-10, 10), -10, 0, random.randint(-20, 20)]]],
                [[0.5, 0.5], [[random.randint(-5, 5), 0, 0, 25], [random.randint(-5, 5), 0, 0, -25]]],
                [[1], [[random.randint(-25, 25), 0, 0, 30]]]
            ],
            [
                [[0.5, 0.5], [[random.randint(-10, 10), 0, 0, -15], [random.randint(-10, 10), 2, 0, 15]]],
                [[0.5, 0.5], [[random.randint(-10, 10), 0, 0, -10], [random.randint(-10, 10), 1, 0, 10]]],
                [[0.5, 0.5], [[random.randint(-10, 10), 0, 0, -5], [random.randint(-10, 10), 2, 0, 5]]],
                [[1], [[random.randint(-10, 10), random.randint(0, 2), 0, random.randint(-15, 15)]]]
            ],
            [
                [[0.5, 0.5], [[10, 1.5, 0, 10], [-10, 0, 0, 10]]],
                [[0.8, 0.2], [[-10, 2, 0, -10], [5, 1, 0, 10]]],
                [[1], [[20, random.randint(0, 1), 0, random.randint(-10, 10)]]]
            ],
            [
                [[0.4, 0.6], [[-10, -10, -15, -5], [-10, random.randint(0, 2), -15, 5]]],
                [[0.6, 0.4], [[-15, -10, -5, -10], [-15, random.randint(0, 2), -5, 10]]],
                [[0.3, 0.7], [[-20, -10, -10, -15], [-20, random.randint(0, 2), -10, 15]]],
                [[0.1, 0.9], [[-5, -10, 0, -10], [-5, random.randint(0, 2), 0, 10]]],
                [[1], [[30, 0, -15, -15]]]
            ],
            [
                [[0.6, 0.2, 0.2], [[0, 1, 0, 30], [0, 1, 0, -30], [-101, -101, -101, -101]]],
                [[1], [[50, -1, -1, -10]]],
                [[0.8, 0.2], [[-20, random.randint(0, 1), -10, 10], [-101, -101, -101, -101]]],
                [[0.4, 0.4, 0.2], [[-30, 0, -5, -20], [-30, random.randint(0, 2), -5, 20], [-101, -101, -101, -101]]],
                [[1], [[0, 0, 20, 0]]]
            ],
            [
                [[1], [[70, 0, -10, -5]]],
                [[1], [[0, 0, -5, 10]]],
                [[1], [[-70, 0, 1, random.randint(0, 20)]]]
            ]
        ]
        return policy_top
    elif level == 'mid':
        policy_mid = [[
            [[0.4, 0.4, 0.2], [[-20, 0, 0, 0], [20, 0, 0, 0], [-101, -101, -101, -101]]],
            [[0.4, 0.4, 0.2], [[-20, 0, 0, 0], [20, 0, 0, 0], [-101, -101, -101, -101]]],
            [[0.8, 0.2], [[10, 0, random.randint(-60, -20), random.randint(-60, 10)], [-101, -101, -101, -101]]],
            [[0.8, 0.2], [[random.randint(-60, -40), 0, 0, 0], [-101, -101, -101, -101]]],
            [[1], [[-20, 0, 0, random.randint(-10, 20)]]]
        ],
            [
                [[0.8, 0.2], [[10, 0, random.randint(-60, -30), 0], [-101, -101, -101, -101]]],
                [[0.8, 0.2], [[10, 0, random.randint(-40, -10), random.randint(-30, 10)], [-101, -101, -101, -101]]],
                [[0.8, 0.2], [[-10, 0, random.randint(-5, 20), random.randint(-30, -10)], [-101, -101, -101, -101]]],
                [[0.8, 0.2], [[0, 0, random.randint(-5, 5), random.randint(-30, -20)], [-101, -101, -101, -101]]]
            ],
            [
                [[0.8, 0.2], [[random.randint(-50, -30), 0, 5, -20], [-101, -101, -101, -101]]],
                [[0.4, 0.4, 0.2], [[random.randint(0, 30), 0, -5, 10], [-30, 0, 0, 10], [-101, -101, -101, -101]]],
                [[1], [[50, 0, -30, 30]]]
            ],
            [
                [[1], [[-30, 0, -10, 20]]],
                [[1], [[-50, 0, -5, 30]]],
                [[1], [[0, 0, 5, -15]]]
            ],
            [
                [[0.8, 0.2], [[-20, 0, -30, 30], [-101, -101, -101, -101]]],
                [[1], [[50, random.randint(0, 1), -20, -10]]]
            ],
            [
                [[0.8, 0.2], [[-30, 0, 40, 50], [-101, -101, -101, -101]]],
                [[1], [[random.randint(-30, -10), 0, 15, random.randint(-25, 25)]]],
                [[1], [[random.randint(-20, 0), 0, 10, random.randint(-30, 30)]]],
                [[0.9, 0.1], [[random.randint(-40, -20), -5, 15, random.randint(-40, 40)], [-50, 0, -15, -30]]],
                [[1], [[random.randint(-40, 40), 0, 20, 20]]],
                [[1], [[5, 0, 0, 5]]]
            ],
            [
                [[0.5, 0.5], [[50, -10, 0, random.randint(-40, 30)], [50, 0, 0, random.randint(-20, 20)]]],
                [[0.8, 0.2], [[-20, 0, 0, random.randint(-50, 40)], [-101, -101, -101, -101]]]
            ],
            [
                [[0.6, 0.2, 0.2], [[0, random.randint(0, 1), 25, 25], [0, 0, 25, -25], [-101, -101, -101, -101]]],
                [[0.9, 0.1], [[10, 0, -10, 0], [0, 2, -10, 20]]]
            ],
            [
                [[1], [[random.randint(-10, 10), -10, 0, random.randint(-20, 20)]]],
                [[0.5, 0.5], [[random.randint(-5, 5), 0, 0, 25], [random.randint(-5, 5), 0, 0, -25]]],
                [[1], [[random.randint(-25, 25), 0, 0, 30]]]
            ],
            [
                [[0.5, 0.5], [[random.randint(-10, 10), 0, 0, -15], [random.randint(-10, 10), 2, 0, 15]]],
                [[0.5, 0.5], [[random.randint(-10, 10), 0, 0, -10], [random.randint(-10, 10), 1, 0, 10]]],
                [[0.5, 0.5], [[random.randint(-10, 10), 0, 0, -5], [random.randint(-10, 10), 2, 0, 5]]],
                [[1], [[random.randint(-10, 10), random.randint(0, 2), 0, random.randint(-15, 15)]]]
            ],
            [
                [[0.5, 0.5], [[10, 1.5, 0, 10], [-10, 0, 0, 10]]],
                [[0.8, 0.2], [[-10, 2, 0, -10], [5, 1, 0, 10]]],
                [[1], [[20, random.randint(0, 1), 0, random.randint(-10, 10)]]]
            ],
            [
                [[0.4, 0.6], [[-10, -10, -15, -5], [-10, random.randint(0, 2), -15, 5]]],
                [[0.6, 0.4], [[-15, -10, -5, -10], [-15, random.randint(0, 2), -5, 10]]],
                [[0.3, 0.7], [[-20, -10, -10, -15], [-20, random.randint(0, 2), -10, 15]]],
                [[0.1, 0.9], [[-5, -10, 0, -10], [-5, random.randint(0, 2), 0, 10]]],
                [[1], [[30, 0, -15, -15]]]
            ],
            [
                [[0.6, 0.2, 0.2], [[0, 1, 0, 30], [0, 1, 0, -30], [-101, -101, -101, -101]]],
                [[1], [[50, -1, -1, -10]]],
                [[0.8, 0.2], [[-20, random.randint(0, 1), -10, 10], [-101, -101, -101, -101]]],
                [[0.4, 0.4, 0.2], [[-30, 0, -5, -20], [-30, random.randint(0, 2), -5, 20], [-101, -101, -101, -101]]],
                [[1], [[0, 0, 20, 0]]]
            ],
            [
                [[1], [[70, 0, -10, -5]]],
                [[1], [[0, 0, -5, 10]]],
                [[1], [[-70, 0, 1, random.randint(0, 20)]]]
            ]
        ]
        return policy_mid
    elif level == 'bottom':
        policy_bottom = [[
            [[0.4, 0.4, 0.2], [[-20, 0, 0, 0], [20, 0, 0, 0], [-101, -101, -101, -101]]],
            [[0.4, 0.4, 0.2], [[-20, 0, 0, 0], [20, 0, 0, 0], [-101, -101, -101, -101]]],
            [[0.8, 0.2], [[30, 0, random.randint(-60, -20), random.randint(-60, 10)], [-101, -101, -101, -101]]],
            [[0.8, 0.2], [[random.randint(-60, -40), 0, 0, 0], [-101, -101, -101, -101]]],
            [[1], [[-20, 0, 0, random.randint(-10, 20)]]]
        ],
            [
                [[0.8, 0.2], [[10, 0, random.randint(-50, -30), 0], [-101, -101, -101, -101]]],
                [[0.8, 0.2], [[10, 0, random.randint(-30, -10), random.randint(-30, 10)], [-101, -101, -101, -101]]],
                [[0.8, 0.2], [[-10, 0, random.randint(-5, 20), random.randint(-30, -10)], [-101, -101, -101, -101]]],
                [[1], [[-20, 0, random.randint(-5, 5), random.randint(-30, -20)]]]
            ],
            [
                [[0.8, 0.2], [[random.randint(-70, -30), 0, 5, -20], [-101, -101, -101, -101]]],
                [[0.4, 0.4, 0.2], [[random.randint(0, 30), 0, -5, 10], [0, 0, 0, 10], [-101, -101, -101, -101]]],
                [[1], [[50, 0, -30, 30]]]
            ],
            [
                [[1], [[-30, 0, -10, 20]]],
                [[1], [[-50, 0, -5, 30]]],
                [[1], [[0, 0, 5, -15]]]
            ],
            [
                [[0.8, 0.2], [[-30, 0, -30, 30], [-101, -101, -101, -101]]],
                [[1], [[50, random.randint(0, 1), -20, -10]]]
            ],
            [
                [[0.8, 0.2], [[-30, 0, 40, 50], [-101, -101, -101, -101]]],
                [[1], [[random.randint(-30, -10), 0, 15, random.randint(-25, 25)]]],
                [[1], [[random.randint(-20, 0), 0, 10, random.randint(-30, 30)]]],
                [[0.9, 0.1], [[random.randint(-40, -20), -5, 15, random.randint(-40, 40)], [-50, 0, -15, -30]]],
                [[1], [[random.randint(-10, 10), 0, 20, 20]]],
                [[1], [[5, 0, 0, 5]]]
            ],
            [
                [[0.5, 0.5], [[50, -10, 0, random.randint(-10, 10)], [50, 0, 0, random.randint(-10, 10)]]],
                [[0.8, 0.2], [[-20, 0, 0, random.randint(-10, 10)], [-101, -101, -101, -101]]]
            ],
            [
                [[0.6, 0.2, 0.2], [[0, random.randint(0, 1), 25, 25], [0, 0, 25, -25], [-101, -101, -101, -101]]],
                [[0.9, 0.1], [[10, 0, -10, 0], [0, 2, -10, 20]]]
            ],
            [
                [[1], [[random.randint(-10, 10), -10, 0, random.randint(-20, 20)]]],
                [[0.5, 0.5], [[random.randint(-5, 5), 0, 0, 25], [random.randint(-5, 5), 0, 0, -25]]],
                [[1], [[random.randint(-25, 25), 0, 0, 30]]]
            ],
            [
                [[0.5, 0.5], [[random.randint(-10, 10), 0, 0, -15], [random.randint(-10, 10), 2, 0, 15]]],
                [[0.5, 0.5], [[random.randint(-10, 10), 0, 0, -10], [random.randint(-10, 10), 1, 0, 10]]],
                [[0.5, 0.5], [[random.randint(-10, 10), 0, 0, -5], [random.randint(-10, 10), 2, 0, 5]]],
                [[1], [[random.randint(-10, 10), random.randint(0, 2), 0, random.randint(-15, 15)]]]
            ],
            [
                [[0.5, 0.5], [[10, 1.5, 0, 10], [-10, 0, 0, 10]]],
                [[0.8, 0.2], [[-10, 2, 0, -10], [5, 1, 0, 10]]],
                [[1], [[20, random.randint(0, 1), 0, random.randint(-10, 10)]]]
            ],
            [
                [[0.4, 0.6], [[-10, -10, -15, -5], [-10, random.randint(0, 2), -15, 5]]],
                [[0.6, 0.4], [[-15, -10, -5, -10], [-15, random.randint(0, 2), -5, 10]]],
                [[0.3, 0.7], [[-20, -10, -10, -15], [-20, random.randint(0, 2), -10, 15]]],
                [[0.1, 0.9], [[-5, -10, 0, -10], [-5, random.randint(0, 2), 0, 10]]],
                [[1], [[30, 0, -15, -15]]]
            ],
            [
                [[0.6, 0.2, 0.2], [[0, 1, 0, 30], [0, 1, 0, -30], [-101, -101, -101, -101]]],
                [[1], [[50, -1, -1, -10]]],
                [[0.8, 0.2], [[-20, random.randint(0, 1), -10, 10], [-101, -101, -101, -101]]],
                [[0.4, 0.4, 0.2], [[-30, 0, -5, -20], [-30, random.randint(0, 2), -5, 20], [-101, -101, -101, -101]]],
                [[1], [[0, 0, 20, 0]]]
            ],
            [
                [[1], [[70, 0, -10, -5]]],
                [[1], [[0, 0, -5, 10]]],
                [[1], [[-70, 0, 1, random.randint(0, 20)]]]
            ]
        ]
        return policy_bottom


def print_parametres(game):
    return "Karma:  " + str(game.karma) + \
           "\nGrade:  " + str(game.score) + \
           "\nFree time:  " + str(game.free_time) + \
           "\nMood:  " + str(game.mood)


def generate_params(level):
    if level == 'top':
        return (random.randrange(-70, 20, 5), random.randrange(48, 60) / 10, random.randrange(20, 40, 5),
                random.randrange(-70, 70, 5))
    elif level == 'mid':
        return (random.randrange(-50, 50, 5), random.randrange(36, 48) / 10, random.randrange(40, 60, 5),
                random.randrange(-40, 60, 5))
    else:
        return (random.randrange(-30, 70, 5), random.randrange(0, 36) / 10, random.randrange(60, 80, 5),
                random.randrange(-30, 80, 5))


def create_random_probability(n):
    remain = 1.0
    my_list = []
    elem = random.random()
    remain -= elem
    my_list.append(elem)
    for i in range(1, n - 1):
        elem = random.uniform(0.0, remain)
    remain -= elem
    my_list.append(elem)
    my_list.append(remain)
    return my_list


class Game:
    def __init__(self, level):
        karma, score, free_time, mood = generate_params(level)
        self.karma = karma
        self.score = score
        self.free_time = free_time
        self.mood = mood
        self.case = 2
        self.level = level
        self.policy = list(get_policy(level))
        self.end = 0

    def get_parameters_change(self, ans_string):
        num_question, num_button = map(int, ans_string.split())
        my_strings = []
        for string in self.policy[num_question - 2][num_button - 1][1]:
            fd = open('sytry.txt', 'a+')
            fd.write(str(string) + '--------------')
            my_strings.append(' '.join(list(map(str, string))))
            fd.write(my_strings[-1] + '\n')
            fd.close()
        sm = np.random.choice(my_strings, 1, replace=False,
                              p=self.policy[num_question - 2][num_button - 1][0])[0]
        return sm
